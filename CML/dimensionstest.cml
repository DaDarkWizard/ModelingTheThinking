# I've added comments.

(defDimension length-dimension)
(defDimension mass-dimension)
(defDimension energy-dimension)
(defDimension time-dimension)
(defDimension area-dimension :documentation "Square footage perhaps?" := (expt length-dimension 2))
(defDimension weird-dimension := (* length-dimension (expt mass-dimension 3)))

(defUnit meter :dimension length-dimension)
(defUnit centimeter := (* 0.01 meter))

# This(+ 32 (* (/ 9 5) celcius))
#
#
# (lambda (?t) (* 5 ?t))

(defDimension temperature-dimension)
(defUnit kelvin :dimension temperature-dimension)
(defRelation celcius (?t ?f)
  :=> (dimension ?t temperature-dimension)
  :<=> (= ?f (- (magnitude ?t kelvin) 273.15))
  :function t)

(defConstantQuantity Pi := (acos -1))

(defModelFragment BaseClass)
(defModelFragment Animal
  :subclass-of (BaseClass))

(defModelFragment Cat
  :subclass-of (Animal))

(defModelFragment Dog
  :subclass-of (Animal))

(defQuantityFunction mass (?x)
  :=> (physical-object ?x)
  :dimension mass-dimension
)

(defQuantityFunction kinetic-energy (?x)
  :dimension energy-dimension)

(defQuantityFunction mass-flow-rate (?x)
  :=> (mass-flow ?x)
  :dimension (/ mass-dimension time-dimension))

(defQuantityFunction distance (?p1 ?p2)
  :=> (and (point ?p1) (point ?p2))
  :dimension length-dimension
  special-value 5)

(defQuantityFunction high-tide-height (?x)
  :step-quantity t
  :dimension length-dimension)

(defQuantityFunction people-in-line (?x)
  :count-quantity t
  :=> (line-of-people ?x))

(defQuantityFunction stop-light-color (?x)
  :non-numeric t
  :=> (and (stop-light ?x)
           (range (stop-light-color ?x)
                  (setof red green yellow))))

(defScenario example-scenario
  :documentation "This is just an example"
  :individuals
    (
      (C :type Cat)
      (D :type Dog)
    )
)